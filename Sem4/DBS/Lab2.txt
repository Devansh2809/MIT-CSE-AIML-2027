1. Creating table Employee (EmpNo, EmpName, Gender, Salary, Address, DNo) with EmpNo as primary key:
create table employee (EmpNo number(5) primary key, EmpName varchar2(20) not null, Gender varchar2(1) not null, Salary number(8,2) not null, Address varchar2(30) not null, DNo number(5), constraint gender_check check (Gender in ('M', 'F')));

2. Creating table Department (DeptNo, DeptName, Location) with DeptNo as primary key and DeptName as candidate key:
create table department (DeptNo number(2) primary key, DeptName varchar2(20) unique, Location varchar2(15));

3. Making DNo of Employee as foreign key which refers to DeptNo of Department:
alter table employee modify foreign key(DNo) references department(DeptNo);

4. Inserting few tuples into Employee and Department which satisfies the above constraints:
insert into department values (01, 'Human Resources', 'First Floor');
insert into department values (02, 'Dev Team', 'Fourth Floor');
insert into department values (03, 'Marketing', 'Second Floor');

insert into employee values (21107, 'Rohan', 'M', 90000, 'Kumar Marg', 01);
insert into employee values (21109, 'Rahul', 'M', 93000, 'Old Church Colony', 02);
insert into employee values (21183, 'Riya', 'F', 95500, 'Old Church Colony', 02);

5. Trying to insert few tuples into Employee and Department which violates some of the above constraints:
insert into employee values (21109, 'Rahul', 'M', 93000, 'Old Church Colony', 009);
insert into employee values (21107, 'Rohan', 'M', 90000, 'Kumar Marg', 017);

6. Trying to modify/delete a tuple which violates a constraint:
delete from department where DeptNo = 02;

7. Modifying the foreign key constraint of Employee table such that whenever a department tuple is deleted, the employees belonging to that department will also be deleted:
alter table employee modify foreign key(DNo) references department(DeptNo) on delete cascade;

8. Creating a named constraint to set the default salary to 10000 and test the constraint by
inserting a new record:
alter table employee modify (constraint default_sal Salary number(8,2) default 10000);
insert into employee (EmpNo, EmpName, Gender, Address, DNo) values (21191, 'Rajdeep', 'M', 'Odisha', 03);

University Database Schema

9. Listing all Students with names and their department names: 
select name, dept_name from student;

10. Listing all instructors in CSE department:
select * from instructor where dept_name = 'Comp. Sci.';

11. Finding the names of courses in CSE department which have 3 credits:
select title from course where dept_name = 'Comp. Sci.' and credits = 3;

12. For the student with ID 12345 (or any other value), showing all course-id and title of all courses registered for by the student:
select t.course_id, c.title from course c, takes t where c.course_id = t.course_id and t.id = 00128;

13. Listing all the instructors whose salary is in between 40000 and 90000:
select * from instructor where salary between 40000 and 90000;

14. Displaying the IDs of all instructors who have never taught a course: 
select id from instructor where id not in (select id from teaches);

15. Finding the student names, course names, and the year, for all students those who have attended classes in room-number 303:
select s.name, c.title, t.year from student s, takes t, section sec, course c where s.id = t.id and t.course_id = sec.course_id and t.sec_id = sec.sec_id and t.semester = sec.semester and t.year = sec.year and t.course_id = c.course_id and sec.room_number = 303;

16. For all students who have opted courses in 2015, find their names and course id’s with the attribute course title replaced by c-name:
select s.name, c.course_id, c.title c_name from student s, takes t, course c where s.id = t.id and t.course_id = c.course_id and t.year = 2015;

17. Finding the names of all instructors whose salary is greater than the salary of at least one instructor of CSE department and salary replaced by inst-salary. String Operations (Use %, _, LIKE):
select i1.name, i1.salary inst_salary from instructor i1, instructor i2 where i1.salary > i2.salary and i2.dept_name like 'Comp.%';

18. Finding the names of all instructors whose department name includes the substring ‘ch’:
select name from instructor where dept_name like '%ch%';

19. Listing the student names along with the length of the student names:
select name, length(name) from student;

20. Listing the department names and 3 characters from 3rd position of each department name:
select dept_name, substr(dept_name, 3, 3) from department;

21. Listing the instructor names in upper case:
select upper(name) from instructor;

22. Replacing NULL with value1(say 0) for a column in any of the table:
select id, nvl(grade, 'F') as grade from takes;

23. Displaying the salary and salary/3 rounded to nearest hundred from Instructor:
select salary, round(salary/3, 2) from instructor;

Adding date of birth column to employee table:
alter table employee add (DOB date);

24. Displaying the birth date of all the employees in the following format:
• ‘DD-MON-YYYY’
• ‘DD-MON-YY’
• ‘DD-MM-YY’
select to_date(dob, 'DD-MON-YYYY') dob from employee;
select to_date(dob, 'DD-MON-YY') dob from employee;
select to_date(dob, 'DD-MM-YY') dob from employee;

25. Listing the employee names and the year (fully spelled out) in which they are born
• ‘YEAR’
• ‘Year’
• ‘year’ 
select name, to_char(dob, 'YEAR') dob from employee;
select name, to_char(dob, 'Year') dob from employee;
select name, to_char(dob, 'year') dob from employee;



